\newif\ifaspdf
\ifx\pdfoutput\undefined
\aspdffalse % we are not running PDFLaTeX
\else
\pdfoutput=1 % we are running PDFLaTeX
\aspdftrue
\fi
\ifaspdf
	\documentclass[pdftex]{wsheet}
\else
	\documentclass{wsheet}
\fi
\usepackage{rcs}
\usepackage[colorlinks]{hyperref}
\RCS $Id: 1-intro.ltx 239 2010-07-23 21:41:31Z RobPearce $
\RCS $Date: 2010-07-23 22:41:31 +0100 (Fri, 23 Jul 2010) $
\RCS $Revision: 239 $
\usepackage{ulem}
\sheet{1}{Introducing Python}
\author{Gareth McCaughan}
\date{Revision \RCSRevision, \RCSDate}
\begin{document}

\section{Credits}

% COPYRIGHT NOTICE:
\copyright{} Gareth McCaughan. All rights reserved.

% 
% CONDITIONS:
% 
% A "Transparent" form of a document means a machine-readable form,
% represented in a format whose specification is available to the general
% public, whose contents can be viewed and edited directly and
% straightforwardly with generic text editors or (for images composed of
% pixels) generic paint programs or (for drawings) some widely available
% drawing editor, and that is suitable for input to text formatters or for
% automatic translation to a variety of formats suitable for input to text
% formatters. A copy made in an otherwise Transparent file format whose
% markup has been designed to thwart or discourage subsequent modification
% by readers is not Transparent. A form that is not Transparent is
% called "Opaque". 
% 
% Examples of Transparent formats include LaTeX source and plain text.
% Examples of Opaque formats include PDF and Postscript.  Paper copies of
% a document are considered to be Opaque.
% 
% Redistribution and use of this document in Transparent and Opaque
% forms, with or without modification, are permitted provided that the
% following conditions are met: 
% 
% - Redistributions of this document in Transparent form must retain
%   the above copyright notice, this list of conditions and the following
%   disclaimer. 
% 
% - Redistributions of this document in Opaque form must reproduce the
%   above copyright notice, this list of conditions and the following
%   disclaimer in the documentation and/or other materials provided with
%   the distribution, and reproduce the above copyright notice in the
%   Opaque document itself.
% 
% - Neither the name of Scripture Union, nor LiveWires nor the names of
%   its contributors may be used to endorse or promote products derived
%   from this document without specific prior written permission. 
% 
% DISCLAIMER:
% 
% THIS DOCUMENT IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS
% IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
% THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
% PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS,
% CONTRIBUTORS OR SCRIPTURE UNION BE LIABLE FOR ANY DIRECT, INDIRECT,
% INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
% NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
% DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
% THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
% (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
% THIS DOCUMENT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 

This document is part of the PieIsReal Python Course. You may
modify and/or distribute this document as long as you comply with the
PieIsReal Documentation Licence: you should have received a copy of the
licence when you received this document.

For the \LaTeX{} source of this sheet, and for more information on
PieIsReal and on this course, see the PieIsReal web site at
\href{http://github.com/CentricWebEstate/pieisreal/}{|http://github.com/CentricWebEstate/pieisreal/|}

%-------------------------------------------------------------------
\section{First steps}
You should have a window on your screen with ``Python'' somewhere
in its title, displaying a line that looks something like this:

\begin{interaction}
>>>
\end{interaction}

If you don't then check Sheet~R (\emph{Running Python}) for how 
to get one.

\begin{note}
          Whenever you see stuff in |typewriter type|, as above, it 
          represents either something you should say to the computer, 
          or something the computer might say to you, or both.
          Where both are present, things for you to type are 
          \uline{underlined}.
          Anything not in typewriter type is just for you to read;
          you shouldn't type it in, or expect the computer to
          print it out.
\end{note}
That |>>>| is called a ``prompt'', which means it's something the 
computer displays to tell you it's ready for your instructions. You 
can type things into that window, and the computer will obey them 
straight away. Later on we'll want to collect up a bunch of stuff for 
the computer to do, but for now we're using the prompt to try things 
out.

Unfortunately, the computer doesn't understand English. If you
type in

\begin{interaction}
>>> \T{Tell me the sum of twelve and thirteen.}
\end{interaction}

it won't understand at all. Instead, because the computer is very
stupid, you have to talk to it in a special language, designed to
be easy for the computer to understand. In fact, there are lots
of languages designed for computers to understand; the one we're
going to look at is called ``Python''. One of the good things
about Python is that it's pretty easy for humans to understand,
too.

\section{It's all gone horribly wrong}

At some point when you're using Python, something like \emph{this}
is going to happen.

\begin{interaction}
>>> \T{3+'aardvark'}
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
TypeError: unsupported operand type(s) for +: 'int' and 'str'
>>>
\end{interaction}

This looks pretty scary. Don't be scared. It's just Python's
way of saying you did something it didn't understand. You can
often ignore everything except the last line (though when it 
happens to your program the other lines can help find the root
cause). To understand the last line, have a look at Sheet~E 
(\emph{Errors}), which has a list of common complaints Python 
might make at you and explanations of what they might mean.

\section{First steps, Continued...}

Here's how you ask the computer to tell you the sum of twelve and
thirteen. Try it yourself. (You don't need to type in the |>>>|,
but you do need to hit the key marked \key{Enter} after typing
the line.)

\begin{interaction}
>>> \T{12+13}
\end{interaction}

Here are some more examples, with the computer's
answers shown too.

\begin{interaction}
>>> \T{1+2+3+4}
10
>>> \T{1+2*3-4}      \C{Use |*| for multiplication, not |x|.}
3                    \C{If you expected |5|, think again!}
>>> \T{200*300}
60000
>>> \T{12/4}         \C{Use |/| for division.}
3.0
\end{interaction}

Now, here's a bit of a surprise.

\begin{interaction}
>>> \T{7/3}
2.3333333333333335
\end{interaction}

You might have expected it to say |2.3333333| or $2{1\over3}$,
but in fact the remainder gets rounded after a few decimal places. 
There are ways of getting a more accurate answer; but that's not 
covered here.

Try experimenting some more with using Python as a calculator.

You can use parentheses to group operations in Python
just as you do in mathematics:

\begin{interaction}
>>> \T{(1+2)*(3+4)}
21
\end{interaction}

Here, Python has calculated |(1+2)| and |(3+4)| (getting 3 and 7),
and then multiplied the results together.

\begin{note}
Don't be afraid to experiment. Whenever you learn something new
that you can do with Python, try making slight changes (or
bigger changes!) and play around until you're confident that
you understand just what's going on. Don't limit yourself to
what's actually printed on the sheets!
\end{note}

Incidentally, if you're still confused about the fact that
|1+2*3-4| gives 3 and not 5, the reason is that ``multiplication
happens before addition''. Your maths book probably
calls this BODMAS or something similar. If you're still confused,
don't worry. Just ask someone to explain it a bit more for you.

%-------------------------------------------------------------------
\section{Different types of object}
So far, all the things you've worked with have been numbers. But
Python can handle plenty of things besides numbers. For instance,
try the following:

\begin{interaction}
>>> \T{'hello, ' + 'world'}
'hello, world'
\end{interaction}

Things between quotation marks are called ``strings''. As you
might guess from the lines above, you can apply |+| to strings
as well as to numbers. It ``concatenates'' strings; that is,
puts two strings together, kind of like using sticky tape.
A little more surprising:

\begin{interaction}
>>> \T{3 * 'hello'}
\end{interaction}

\begin{note}
You'll notice that this time I haven't told you what the machine
says. That's because you're supposed to try it for yourself.
You won't learn anything if you don't try the examples. Write
down what the machine said when you asked it for |3*'hello'|
in the space below, so that you remember.
\vspace{1cm}
\end{note}

You can surround strings in either single quotes or double quotes;
Python doesn't mind.

\begin{interaction}
>>> \T{'ham' + "mock"}
'hammock'
\end{interaction}

Why would you care about that? Well, suppose you wanted a string
containing the text |I'm sorry| ? Give it a go!

Python also has ``lists'':

\begin{interaction}
>>> \T{[1,2,3]}
[1, 2, 3]
>>> \T{[1,2,3] + [7,8]}
\end{interaction}

Again, I haven't told you what Python says to that last thing.
Write it down in the space below.
\vspace{1cm}

%-------------------------------------------------------------------
\section{Giving names to things}
Suppose you know that you're going to need to do a lot of
calculations involving the number 123456. (Maybe it's your
annual salary in pounds, or something.) You could just type
the number in every time:

\begin{interaction}
>>> \T{123456*3}
370368
>>> \T{123456/6}
20576.0
>>> \T{123456-1000}
122456
\end{interaction}

This might get very boring after a while. And if anyone else
wanted to read what you were doing, they might be confused by
the mysterious number 123456 and wonder why it appeared so
often.

We can solve either of these problems by giving the number a name.
To save typing, give it a short name, like |n| (short for ``number'',
maybe). To make it more obvious what it means, give it a longer
name, like |salary|. Here's how we do that.

\begin{interaction}
>>> \T{salary=123456}
>>> \T{salary*4}
493824
>>> \T{salary/12}
10288.0
>>> \T{salary}
123456
\end{interaction}

The idea is that, after you've said |salary=123456|, you can
always type |salary| instead of |123456|.

\begin{note}
          What we've called ``names'', most people call ``variables''.
          You'll find out later why they're called that. For now,
          ``names'' is fine.
\end{note}

You can name things other than numbers, too. For instance:

\begin{interaction}
>>> \T{MyName = 'Gareth'}
>>> \T{'Hello, ' + MyName + '!'}
'Hello, Gareth!'
\end{interaction}

Notice that when you give something a name like this, Python doesn't 
print anything in response. We'll see why in a moment.
%-------------------------------------------------------------------
\section{Doing something over and over again}
So far, we've done very little that your pocket calculator
couldn't do equally well. Here's something your calculator
probably isn't so good at. The extra spaces on the second line
are important, by the way! (This is explained in more detail
in Sheet~2.)

\begin{interaction}[7cm]
>>> \T{for x in 1,2,3,4,5:}
...   \T{print(x, x*x)}     \C{The prompt changes, to tell you Python is expecting more.}
...                         \C{Just press \key{Enter}.}
\end{interaction}

Can you guess what this will do? \dots If you guessed that it
prints out the numbers from 1 to 5 along with their squares,
well done. Notice that Python conveniently puts a space between
the two things you've asked it to print.

\begin{note}
          The |print| function is used when you want to make the computer
          display things. The reason we haven't needed it before is
          that when you type in something at the prompt, and that thing 
          has an answer Python 
          can work out, it automatically displays that answer. Things
          with answers are called ``expressions'', for some reason.
          But Python doesn't print out {\rm every} value it computes;
          only the values of expressions you type in at the |>>>| prompt. 
          When you write bunches of stuff to do together, like you did 
          just now and will be doing a lot of later, you need to tell it 
          to print stuff out using the |print| command.
\end{note}
%-------------------------------------------------------------------
\section{Graphics}
You can use Python for drawing pictures. Try this. The first two lines
will probably seem rather weird; we'll explain them later.

\begin{interaction}
>>> \T{from pieisreal import *}
>>> \T{begin_graphics()}
>>> \T{set_color(Color.red)}
>>> \T{move(100,100)}
>>> \T{draw(200,100)}
>>> \T{set_color(Color.blue)}
>>> \T{draw(100,200)}
>>> \T{end_graphics()}
\end{interaction}

After you've typed that last command, you may find that
Python sits doing nothing until you close its graphics window.
If so, close its graphics window! Normally the last line will 
make Python do so itself.

\section{What next?}
We have two kinds of worksheets.
\begin{enumerate}
 \item \emph{Activity sheets}, each of which takes you through
       writing a program to do something that might be interesting.
       These sheets are numbered: Sheet~2, Sheet~3 and so on.
       (The sheet you've almost finished reading now is Sheet~1.)
 \item \emph{Information sheets}, each of which tells you something
       useful about Python.
       These sheets are lettered: Sheet~P, Sheet~L, or whatever.
       Usually the letters have something to do with what the
       sheets are about, but not always.
\end{enumerate}

You should probably read Sheet~R (\emph{Running Python}) now,
if you haven't read it already.

After that, we recommend that you work through the activity sheets in order.
Each one will point you to a few information sheets that you'll
want to have handy when working through it.
%-------------------------------------------------------------------
\end{document}
